                                                                                                                  
MSE Assignment 1 :
________________

NAME - Jayavardhini S
USN - 1PI10IS040
Class - 7 'A' ISE


Q) Protocols vs. Subclasses.
   ________________________

Protocols :
-----------

1. A protocol is used to declare methods and properties that are independent of any specific class.Protocols can include declarations for both instance methods and class methods, as well as properties.
-By default, all methods declared in a protocol are required methods. This means that any class that conforms to the protocol must implement those methods.
-Itâ€™s also possible to specify optional methods in a protocol. These are methods that a class can implement only if it needs to.

2. Need  for protocols
-A protocol can of course incorporate other protocols that have been defined similarly to how it is done with inheritance, without any hierarchy imposed on protocols (unlike subclassing).
-It helps in avoiding the complexities of subclassing, similar to the way categories do, but in a different manner.
-To declare methods for others to implement.
-To mark similarities between classes that are not part of the same inheritance tree.


3. Advantage
The idea is to provide a way for classes to share the same method and property declarations without inheriting them from a common ancestor.
It helps to implement polymorphism. Without protocols, users of the class would have to subclass the original class, deal with any issues, and override the original methods. 

4. Example
 
@protocol ProtocolName
// list of methods and properties
@end

Subclasses :
------------

1. A subclass is a class that inherits the definition of a superclass. A subclass inherits methods and instance variables from its superclass.

2. Need for subclassing:
  We may want to override the methods in existing classes.  Some objects have default methods and settings that may not be suitable for your needs.  By creating a custom subclass, you can set your interface elements to inherit qualities according to your criteria, not just from the object's default class implementation.  

3. Advantage
Subclassing is more useful if we want to alter the behavior of only certain instances, and retain the original method for others.

4. Example

Ex 1 :

@interface subclassA : A {
// instance variables of subclassA 
}
// methods of subclassA ,if both class A and subclassA have a methos with same name ,then subclassA 's method overrides class A's method.But if we want to use Class A's methos follow example 2. 
@end

Ex 2 :

[super methodname];


